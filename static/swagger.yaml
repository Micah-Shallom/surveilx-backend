openapi: 3.0.0
info:
  title: SurvielX Backend API
  description: API for managing vehicle access and security in a residential estate.
  version: 1.0.0
servers:
  - url: /api/v1
    description: Development server
paths:
  /auth/register:
    post:
      tags:
        - Auth
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterInput'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
  /auth/login:
    post:
      tags:
        - Auth
      summary: Login a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginInput'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /health:
    get:
      tags:
        - Health
      summary: Check the health of the API
      responses:
        '200':
          description: API is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: healthy
                  message:
                    type: string
                    example: SurvielX Backend API is running smoothly.
  /users:
    get:
      tags:
        - Users
      summary: Get all users
      security:
        - bearerAuth: []
      responses:
        '200':
          description: A list of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /profile:
    get:
      tags:
        - Profile
      summary: Get user profile
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      tags:
        - Profile
      summary: Update user profile
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserProfileInput'
      responses:
        '200':
          description: Profile updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /access-exit-points:
    get:
      tags:
        - Access/Exit Points
      summary: Get all access/exit points
      security:
        - bearerAuth: []
      responses:
        '200':
          description: A list of access/exit points
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AccessExitPoint'
        '401':
          $ref: '#/components/responses/Unauthorized'
    post:
      tags:
        - Access/Exit Points
      summary: Create a new access/exit point
      description: Requires admin or security role.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
      responses:
        '201':
          description: Access/exit point created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessExitPoint'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
  /access-exit-points/{id}:
    get:
      tags:
        - Access/Exit Points
      summary: Get a single access/exit point
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: An access/exit point
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessExitPoint'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      tags:
        - Access/Exit Points
      summary: Update an access/exit point
      description: Requires admin or security role.
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
      responses:
        '200':
          description: Access/exit point updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessExitPoint'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      tags:
        - Access/Exit Points
      summary: Delete an access/exit point
      description: Requires admin or security role.
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Access/exit point deleted successfully
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
  /vehicles/register:
    post:
      tags:
        - Vehicles
      summary: Register a new vehicle for the current user
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterVehicleInput'
      responses:
        '201':
          description: Vehicle registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vehicle'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /vehicles/fetch_vehicles:
    get:
      tags:
        - Vehicles
      summary: Get all vehicles for the current user
      security:
        - bearerAuth: []
      responses:
        '200':
          description: A list of vehicles
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Vehicle'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /vehicles/{vehicle_id}/activities:
    get:
      tags:
        - Vehicles
      summary: Get all activities for a specific vehicle
      security:
        - bearerAuth: []
      parameters:
        - name: vehicle_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: A list of vehicle activities
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/VehicleActivity'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
  /vehicles/guest/activities/{plateNumber}:
    get:
      tags:
        - Vehicles
      summary: Get all activities for a guest vehicle by plate number
      security:
        - bearerAuth: []
      parameters:
        - name: plateNumber
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A list of vehicle activities
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/VehicleActivity'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
  /vehicles/log-vehicle:
    post:
      tags:
        - Security
      summary: Log an entry or exit for a vehicle by security personnel
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LogVehicleActivityInput'
      responses:
        '201':
          description: Vehicle activity logged successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VehicleActivity'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /vehicles/identify/{plateNumber}:
    get:
      tags:
        - Vehicles
      summary: Identify a vehicle by plate number
      parameters:
        - name: plateNumber
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The vehicle identity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vehicle'
        '404':
          $ref: '#/components/responses/NotFound'
  /vehicles/sys-log-vehicle:
    post:
      tags:
        - Vehicles
      summary: System log an entry or exit for a vehicle
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LogVehicleActivityInput'
      responses:
        '201':
          description: Vehicle activity logged successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VehicleActivity'
        '400':
          $ref: '#/components/responses/BadRequest'
  /vehicles/deregister/{vehicle_id}:
    delete:
      tags:
        - Vehicles
      summary: Deregister a vehicle
      description: Removes a vehicle from the system using its unique ID.
      parameters:
        - name: vehicle_id
          in: path
          required: true
          description: Unique identifier of the vehicle to deregister
          schema:
            type: string
      responses:
        '200':
          description: Vehicle successfully deregistered
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  status_code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Vehicle successfully deregistered
        '404':
          description: Vehicle not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  status_code:
                    type: integer
                    example: 404
                  message:
                    type: string
                    example: Vehicle not found
  /security/registered-logs:
    get:
      tags:
        - Security
      summary: Get all registered vehicles logs
      description: Requires admin or security role.
      security:
        - bearerAuth: []
      parameters:
        - name: plate_number
          in: query
          schema:
            type: string
          description: Filter by plate number
        - name: model
          in: query
          schema:
            type: string
          description: Filter by vehicle model
        - name: color
          in: query
          schema:
            type: string
          description: Filter by vehicle color
        - name: type
          in: query
          schema:
            type: string
          description: Filter by vehicle type
        - name: page
          in: query
          schema:
            type: integer
            default: 1
          description: Page number for pagination
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
          description: Number of items per page
      responses:
        '200':
          description: A list of registered vehicle logs
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/VehicleActivity'
                  pagination:
                    $ref: '#/components/schemas/PaginationResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
  /security/guest-logs:
    get:
      tags:
        - Security
      summary: Get all guest vehicles logs
      description: Requires admin or security role.
      security:
        - bearerAuth: []
      parameters:
        - name: plate_number
          in: query
          schema:
            type: string
          description: Filter by plate number
        - name: page
          in: query
          schema:
            type: integer
            default: 1
          description: Page number for pagination
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
          description: Number of items per page
      responses:
        '200':
          description: A list of guest vehicle logs
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/VehicleActivity'
                  pagination:
                    $ref: '#/components/schemas/PaginationResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
  /security/activity-report:
    get:
      tags:
        - Security
      summary: Generate activity report
      description: Requires admin or security role.
      security:
        - bearerAuth: []
      parameters:
        - name: from
          in: query
          schema:
            type: string
            format: date
          description: Start date for the report (YYYY-MM-DD)
        - name: to
          in: query
          schema:
            type: string
            format: date
          description: End date for the report (YYYY-MM-DD)
        - name: visitor_type
          in: query
          schema:
            type: string
            enum: [registered, guest]
          description: Filter by visitor type
        - name: page
          in: query
          schema:
            type: integer
            default: 1
          description: Page number for pagination
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
          description: Number of items per page
      responses:
        '200':
          description: Activity report
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/VehicleActivity'
                  pagination:
                    $ref: '#/components/schemas/PaginationResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
  /vehicles/{plateNumber}/history:
    get:
      tags:
        - Vehicles
      summary: Get vehicle log history
      description: Returns detailed log history for a vehicle.
      parameters:
        - name: plateNumber
          in: path
          required: true
          schema:
            type: string
          description: The plate number of the vehicle
        - name: limit
          in: query
          schema:
            type: integer
            default: 50
          description: Maximum number of log entries to return
      responses:
        '200':
          description: Vehicle log history retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  vehicle:
                    $ref: '#/components/schemas/Vehicle'
                  logs:
                    type: array
                    items:
                      $ref: '#/components/schemas/VehicleActivity'
                  total_logs:
                    type: integer
        '404':
          $ref: '#/components/responses/NotFound'
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        email:
          type: string
          format: email
        role:
          type: string
          enum: [admin, user, security]
        createdAt:
          type: string
          format: date-time
    RegisterInput:
      type: object
      required:
        - name
        - email
        - password
        - role
      properties:
        name:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
          format: password
        role:
          type: string
          enum: [admin, user, security]
    LoginInput:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
    Profile:
      type: object
      properties:
        profile_id:
          type: string
          format: uuid
        full_name:
          type: string
        username:
          type: string
        phone:
          type: string
        user_id:
          type: string
          format: uuid
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    UpdateUserProfileInput:
      type: object
      properties:
        full_name:
          type: string
        username:
          type: string
        phone:
          type: string
    AccessExitPoint:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        createdAt:
          type: string
          format: date-time
    Vehicle:
      type: object
      properties:
        id:
          type: string
          format: uuid
        user_id:
          type: string
          format: uuid
        plate_number:
          type: string
        type:
          type: string
          enum: [bus, car, bike]
        model:
          type: string
        color:
          type: string
        createdAt:
          type: string
          format: date-time
    RegisterVehicleInput:
      type: object
      required:
        - plate_number
        - model
        - color
        - type
      properties:
        plate_number:
          type: string
        model:
          type: string
        color:
          type: string
        type:
          type: string
          enum: [bus, car, bike]
    LogVehicleActivityInput:
      type: object
      required:
        - plate_number
        - visitor_type
        - is_entry
      properties:
        plate_number:
          type: string
        visitor_type:
          type: string
          enum: [registered, guest]
        is_entry:
          type: boolean
        entry_point_id:
          type: string
          format: uuid
        exit_point_id:
          type: string
          format: uuid
    VehicleActivity:
      type: object
      properties:
        id:
          type: string
          format: uuid
        plate_number:
          type: string
        visitor_type:
          type: string
          enum: [registered, guest]
        vehicle_id:
          type: string
          format: uuid
        user_id:
          type: string
          format: uuid
        is_entry:
          type: boolean
        vehicle_type:
          type: string
          enum: [bus, car, bike]
        entry_point_id:
          type: string
          format: uuid
        exit_point_id:
          type: string
          format: uuid
        registered_by:
          type: string
          format: uuid
        timestamp:
          type: string
          format: date-time
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    Error:
      type: object
      properties:
        code:
          type: integer
        message:
          type: string
    PaginationResponse:
      type: object
      properties:
        current_page:
          type: integer
        page_count:
          type: integer
        total_pages_count:
          type: integer
  responses:
    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotFound:
      description: Not Found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    InternalServerError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
